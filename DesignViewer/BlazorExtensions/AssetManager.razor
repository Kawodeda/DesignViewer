@using System.Net
@using ApiClient
@using BlazorExtensions.Models
@using BlazorExtensions.Services.JsInterop
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web.Virtualization
@inject IAssetsApiClient _assetsApi
@inject IJsModulesProvider _jsModulesProvider

<div class="modal" style="display: @_displayModal">
    <div class="modal-content">
        @if (_displayContent)
        {
            <div class="modal-header">
                <h3 class="header">@Header</h3>
                <span class="oi oi-x close" @onclick="(args) => Close()"></span>
            </div>
            <div class="modal-body" @ref="_body" @onclick="(args) => OnBodyClick(args)">
                @if(_firstFetch)
                {
                    <Preloader></Preloader>
                }
                <Virtualize @ref="_virtualizeRef" ItemsProvider="@LoadAssetsAsync" Context="assets" ItemSize="@AssetItemSize" OverscanCount="1">
                    <ItemContent>
                        @foreach (var asset in assets)
                        {
                            <AssetItem Asset="@asset"
                               Size="@ItemSize"
                               Margin="@ItemMargin"
                               Selected="@OnItemSelect"
                               Unselected="@OnItemUnselect">
                            </AssetItem>
                        }
                    </ItemContent>
                    <Placeholder>
                        @for (int i = 0; i < _columnCount; i++)
                        {
                            <div class="asset-item-placeholder" style="width: @(ItemSize)px; height: @(ItemSize)px;  margin: @(ItemMargin)px;">
                                <img class="asset-item-placeholder-image" src="./_content/BlazorExtensions/preloader2.gif" />
                            </div>
                        }
                    </Placeholder>
                </Virtualize>
            </div>
            <div class="modal-footer">
                @if(ShowUpload)
                {
                    <div class="file-upload-container">
                        <FileUpload OnChange="@OnFileSelected" Accept="image/gif, image/*"></FileUpload>
                        <p class="file-upload-message @_messageAnimationClass">
                            @_fileUploadMessage
                        </p>
                    </div>
                }
                @if(ShowSelectImage)
                {
                    <button class="btn btn-primary" @onclick="async (args) => {
                        Open(new AssetFetchOptions(AssetType.Image));
                        await Reload();
                        }">
                        <span class="oi oi-image" style="margin: 0 5px 0 0"></span>
                        Select other image as mockup
                    </button>
                }
                <button class="btn btn-success" @onclick="(args) => OnSubmit(args)" disabled="@(!IsSubmitEnabled)">
                    <span class="oi oi-check"></span>
                    Submit
                    </button>
            </div>
        }
    </div>
</div>

@code {
    private const string DisplayNone = "none";
    private const string DisplayBlock = "block";
    private const string FadeOutAnimationClass = "animated-fade-out";
    private const string UploadSuccessMessage = "File \"{0}\" has been successfully uploaded.";
    private const string UploadFailedMessage = "Could not upload file \"{0}\".";
    private const string UploadConflictMessage = "Can't upload file with existing name: \"{0}\".";
    private const string UploadTooBigFileMessage = "Selected file's size exceeds the maximum file size: {0}";
    private const float ItemSize = 225;
    private const float ItemMargin = 5;
    private const long FileMaxSize = 4 * 1024 * 1024;

    private string _displayModal = DisplayNone;
    private bool _displayContent = false;
    private bool _isSubmitEnabled = false;
    private Virtualize<IEnumerable<Asset>> _virtualizeRef = default!;
    private ElementReference _body;
    private int _columnCount;
    private bool _firstFetch = true;
    private AssetItem? _selectedItem;
    private string _fileUploadMessage = string.Empty;
    private string _messageAnimationClass = FadeOutAnimationClass;

    private JsModule _jsModule = default!;

    [Parameter]
    public string Header { get; set; } = string.Empty;

    [Parameter]
    public EventCallback Closed { get; set; }

    [Parameter]
    public AssetFetchOptions AssetFetchOptions { get; set; } = new AssetFetchOptions(AssetType.Image);

    public event EventHandler<Asset>? Submited;

    public void Open(AssetFetchOptions options)
    {
        AssetFetchOptions = options;
        _displayModal = DisplayBlock;
        _displayContent = true;
        _firstFetch = true;
        StateHasChanged();
    }

    public void Close()
    {
        _displayModal = DisplayNone;
        _displayContent = false;
        _fileUploadMessage = string.Empty;
        StateHasChanged();
        UnselectCurrentItem();
        Closed.InvokeAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        await InitJsModule();
        await base.OnInitializedAsync();
    }

    private Task<int> ColumnCount
    {
        get
        {
            return _jsModule.Module!.InvokeAsync<float>("getElementWidth", _body)
                .AsTask()
                .ContinueWith(bodyWidth =>
                {
                    _columnCount = (int)(bodyWidth.Result / AssetItemSize);

                    return _columnCount;
                });
        }
    }

    private float AssetItemSize
    {
        get
        {
            return ItemSize + 2 * ItemMargin;
        }
    }

    private AssetItem? SelectedItem
    {
        get
        {
            return _selectedItem;
        }
        set
        {
            _selectedItem = value;
        }
    }

    private bool IsSubmitEnabled
    {
        get
        {
            return SelectedItem != null;
        }
        set
        {
            if (_isSubmitEnabled == value)
            {
                return;
            }

            _isSubmitEnabled = value;
            StateHasChanged();
        }
    }

    private bool ShowUpload
    {
        get
        {
            return AssetFetchOptions.AssetType == AssetType.Image;
        }
    }

    private bool ShowSelectImage
    {
        get
        {
            return AssetFetchOptions.AssetType == AssetType.Mockup;
        }
    }

    private async Task Reload()
    {
        await _virtualizeRef.RefreshDataAsync(); 
        StateHasChanged();
    }

    private async ValueTask<ItemsProviderResult<IEnumerable<Asset>>> LoadAssetsAsync(ItemsProviderRequest request)
    {
        int columnCount = await ColumnCount;
        ICollection<AssetDto> assetInfos = await GetAssetInfos();
        int rowCount = (int)Math.Ceiling(assetInfos.Count / (float)columnCount);

        var rows = await Task.WhenAll(assetInfos
            .Chunk(columnCount)
            .Skip(request.StartIndex)
            .Take(request.Count)
            .Select(async infoRow => await Task.WhenAll(infoRow
                .Select(async info =>
                {
                    using MemoryStream content = await LoadAssetContentAsync(info.StorageId);
                    string url = await _jsModule.Module!.InvokeAsync<string>("getImageUrl", content.ToArray());

                    return new Asset(info, url);
                }))));

        if(_firstFetch)
        {
            _firstFetch = false;
            StateHasChanged();
        }

        return new ItemsProviderResult<IEnumerable<Asset>>(rows, rowCount);
    }

    private async Task<MemoryStream> LoadAssetContentAsync(string storageId)
    {
        using FileResponse response = await _assetsApi.GetAssetContnetAsync(storageId);
        var result = new MemoryStream();
        response.Stream.CopyTo(result);

        return result;
    }

    private void OnSubmit(MouseEventArgs e)
    {
        if(SelectedItem == null)
        {
            return;
        }

        Submited?.Invoke(this, SelectedItem!.Asset);
        Close();
    }

    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        if(e.File.Size > FileMaxSize)
        {
            ShowFileUploadMessage(string.Format(UploadTooBigFileMessage, $"{(FileMaxSize / 1024 / 1024)} MB"));
            return;
        }

        try
        {
            using Stream stream = e.File.OpenReadStream(FileMaxSize);
            await _assetsApi.UploadAssetAsync(
                Path.GetFileNameWithoutExtension(e.File.Name),
                e.File.ContentType,
                e.File.Size,
                new FileParameter(stream));

            await _virtualizeRef.RefreshDataAsync();
            ShowFileUploadMessage(string.Format(UploadSuccessMessage, e.File.Name));
        }
        catch(ApiException ex)
        {
            switch(ex.StatusCode)
            {
                case (int)HttpStatusCode.InternalServerError:
                    ShowFileUploadMessage(string.Format(UploadFailedMessage, e.File.Name));
                    break;
                case (int)HttpStatusCode.Conflict:
                    ShowFileUploadMessage(string.Format(
                        UploadConflictMessage,
                        Path.GetFileNameWithoutExtension(e.File.Name)));
                    break;
            }
        }
    }

    private void OnBodyClick(MouseEventArgs e)
    {
        UnselectCurrentItem();
    }

    private void OnItemSelect(AssetItem item)
    {
        UnselectCurrentItem();
        SelectedItem = item;
    }

    private void OnItemUnselect(AssetItem item)
    {
        SelectedItem = null;
    }

    private void UnselectCurrentItem()
    {
        if (SelectedItem != null)
        {
            SelectedItem.IsSelected = false;
        }
    }

    private async Task<ICollection<AssetDto>> GetAssetInfos()
    {
        switch(AssetFetchOptions.AssetType)
        {
            case AssetType.Image:
                return await _assetsApi.ListImagesAsync();
            case AssetType.Mockup:
                return await _assetsApi.ListMockupsAsync();
            default:
                throw new NotSupportedException();
        }
    }

    private void ShowFileUploadMessage(string message)
    {
        _messageAnimationClass = string.Empty;
        Task.Delay(10).ContinueWith((task) =>
        {
            _fileUploadMessage = message;
            _messageAnimationClass = FadeOutAnimationClass;
            StateHasChanged();
        });
    }

    private async Task InitJsModule()
    {
        _jsModule = _jsModulesProvider.AssetManager;
        await _jsModule.LoadingTask;
    }
}