@using ApiClient
@using BlazorExtensions.Services.JsInterop
@inject IAssetsApiClient _assetsApi
@inject IJsModulesProvider _jsModulesProvider

<div class="modal" style="display: @_displayModal">
    <div class="modal-content">
        @if (_displayContent)
        {
            <div class="modal-header">
                <h3 class="header">@Header</h3>
                <span class="oi oi-x close" @onclick="(args) => Close()"></span>
            </div>
            <div class="modal-body">
                @*<img src="./_content/BlazorExtensions/preloader2.gif" width="100" height="100"/>*@
                <img />
            </div>
            <div class="modal-footer">
                <button class="btn btn-primary btn-upload">
                    <span class="oi oi-data-transfer-upload"></span>
                    Upload
                </button>
                <button class="btn btn-primary">
                    <span class="oi oi-check"></span>
                    Accept
                    </button>
            </div>
        }
    </div>
</div>

@code {
    private const string DisplayNone = "none";
    private const string DisplayBlock = "block";

    private string _displayModal = DisplayNone;
    private bool _displayContent = false;
    private JsModule _jsModule = default!;

    [Parameter]
    public string Header { get; set; } = string.Empty;

    public void Open()
    {
        _displayModal = DisplayBlock;
        _displayContent = true;
        StateHasChanged();
    }

    public void Close()
    {
        _displayModal = DisplayNone;
        _displayContent = false;
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        await InitJsModule();
        await base.OnInitializedAsync();
    }

    private async Task LoadAssets()
    {
        var assets = await _assetsApi.ListAssetsAsync();
    }

    private async Task InitJsModule()
    {
        _jsModule = _jsModulesProvider.AssetManager;
        await _jsModule.LoadingTask;
    }
}
