@using ApiClient
@using BlazorExtensions.Services.JsInterop
@using Microsoft.AspNetCore.Components.Web.Virtualization
@inject IAssetsApiClient _assetsApi
@inject IJsModulesProvider _jsModulesProvider

<div class="modal" style="display: @_displayModal">
    <div class="modal-content">
        @if (_displayContent)
        {
            <div class="modal-header">
                <h3 class="header">@Header</h3>
                <span class="oi oi-x close" @onclick="(args) => Close()"></span>
            </div>
            <div class="modal-body" @ref="_body">
                @if(_firstFetch)
                {
                    <Preloader></Preloader>
                }
                <Virtualize @ref="_virtualizeRef" ItemsProvider="@(async (request) => await LoadAssets(request))" Context="urls" ItemSize="@ImageItemSize" OverscanCount="1">
                    <ItemContent>
                        @foreach(string url in urls)
                        {
                            <div style="width: @(ImageSize)px; height: @(ImageSize)px; margin: @(ImageMargin)px; display: inline-block;">
                                <img src="@url" style="width: @(ImageSize)px; height: @(ImageSize)px;" alt="Could not load..." />
                            </div>
                        }
                    </ItemContent>
                    <Placeholder>
                        @for (int i = 0; i < _columnCount; i++)
                        {
                            <div style="width: @(ImageSize)px; height: @(ImageSize)px;  margin: @(ImageMargin)px; display: inline-block;">
                                <img src="./_content/BlazorExtensions/preloader2.gif" style="width: @(ImageSize)px; height: @(ImageSize)px;" />
                            </div>
                        }
                    </Placeholder>
                </Virtualize>
            </div>
            <div class="modal-footer">
                <button class="btn btn-primary btn-upload" @onclick="async (args) => await Reload(args)">
                    <span class="oi oi-data-transfer-upload"></span>
                    Upload
                </button>
                <button class="btn btn-primary">
                    <span class="oi oi-check"></span>
                    Accept
                    </button>
            </div>
        }
    </div>
</div>

@code {
    private const string DisplayNone = "none";
    private const string DisplayBlock = "block";
    private const float ImageSize = 225;
    private const float ImageMargin = 5;

    private string _displayModal = DisplayNone;
    private bool _displayContent = false;
    private JsModule _jsModule = default!;
    private List<string> _assetUrls = new List<string>();
    private Virtualize<IEnumerable<string>> _virtualizeRef;
    private ElementReference _body;
    private int _columnCount;
    private bool _firstFetch = true;


    [Parameter]
    public string Header { get; set; } = string.Empty;

    public void Open()
    {
        _displayModal = DisplayBlock;
        _displayContent = true;
        _firstFetch = true;
        StateHasChanged();
    }

    public void Close()
    {
        _displayModal = DisplayNone;
        _displayContent = false;
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        await InitJsModule();
        await base.OnInitializedAsync();
    }

    private float ImageItemSize
    {
        get
        {
            return ImageSize + 2 * ImageMargin;
        }
    }

    private async Task Reload(MouseEventArgs e)
    {
        await _virtualizeRef.RefreshDataAsync(); 
        StateHasChanged();
    }

    private async ValueTask<ItemsProviderResult<IEnumerable<string>>> LoadAssets(ItemsProviderRequest request)
    {
        int columnCount = await ColumnCount;
        ICollection<AssetDto> assetInfos = await _assetsApi.ListAssetsAsync();
        int rowCount = (int)Math.Ceiling(assetInfos.Count / (float)columnCount);

        var rows = await Task.WhenAll(assetInfos
            .Chunk(columnCount)
            .Skip(request.StartIndex)
            .Take(request.Count)
            .Select(async infoRow => await Task.WhenAll(infoRow
                .Select(async info =>
                {
                    using MemoryStream content = await LoadAssetContentAsync(info.StorageId);

                    return await _jsModule.Module!.InvokeAsync<string>("getImageUrl", content.ToArray());
                }))));

        if(_firstFetch)
        {
            _firstFetch = false;
            StateHasChanged();
        }

        return new ItemsProviderResult<IEnumerable<string>>(rows, rowCount);
    }

    private async Task LoadAssetsAsync()
    {
        ICollection<AssetDto> assetInfos = await _assetsApi.ListAssetsAsync();

        MemoryStream[] assets = await Task.WhenAll(
            assetInfos
            .Select(info => LoadAssetContentAsync(info.StorageId))
            .ToArray());

        await Task.WhenAll(
            assets
            .Select( async asset => {
                try
                {
                    string url = await _jsModule.Module!.InvokeAsync<string>("getImageUrl", asset.ToArray());
                    _assetUrls.Add(url);
                }
                finally
                {
                    asset.Dispose();
                }
            })
            .ToArray());

        StateHasChanged();
    }

    private async Task<MemoryStream> LoadAssetContentAsync(string storageId)
    {
        using FileResponse response = await _assetsApi.GetAssetContnetAsync(storageId);
        var result = new MemoryStream();
        response.Stream.CopyTo(result);

        return result;
    }

    private Task<int> ColumnCount
    {
        get
        {
            return _jsModule.Module!.InvokeAsync<float>("getElementWidth", _body)
                .AsTask()
                .ContinueWith(bodyWidth =>
                {
                    _columnCount = (int)(bodyWidth.Result / ImageItemSize);

                    return _columnCount;
                });
        }
    }

    private async Task InitJsModule()
    {
        _jsModule = _jsModulesProvider.AssetManager;
        await _jsModule.LoadingTask;
    }
}
