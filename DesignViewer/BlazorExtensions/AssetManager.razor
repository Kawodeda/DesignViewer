@using ApiClient
@using BlazorExtensions.Services.JsInterop
@using Microsoft.AspNetCore.Components.Web.Virtualization
@inject IAssetsApiClient _assetsApi
@inject IJsModulesProvider _jsModulesProvider

<div class="modal" style="display: @_displayModal">
    <div class="modal-content">
        @if (_displayContent)
        {
            <div class="modal-header">
                <h3 class="header">@Header</h3>
                <span class="oi oi-x close" @onclick="(args) => Close()"></span>
            </div>
            <div class="modal-body">
                @*<img src="./_content/BlazorExtensions/preloader2.gif" width="100" height="100"/>*@
                @*@foreach(string url in _assetUrls)
                {
                    <img src="@url" style="margin: 5px" onload="() => URL.revokeObjectURL('@url')" width="100" height="100"/>
                }*@
                <img src="./_content/BlazorExtensions/preloader2.gif" style="margin: 5px" width="200" height="200" />
                <Virtualize ItemsProvider="@LoadAssets" Context="url" ItemSize="200">
                    <ItemContent>
                        <img src="@url" style="margin: 5px" width="200" height="200" />
                    </ItemContent>
                    <Placeholder>
                        <img src="./_content/BlazorExtensions/preloader2.gif" style="margin: 5px" width="200" height="200" />
                    </Placeholder>
                </Virtualize>
            </div>
            <div class="modal-footer">
                <button class="btn btn-primary btn-upload">
                    <span class="oi oi-data-transfer-upload"></span>
                    Upload
                </button>
                <button class="btn btn-primary">
                    <span class="oi oi-check"></span>
                    Accept
                    </button>
            </div>
        }
    </div>
</div>

@code {
    private const string DisplayNone = "none";
    private const string DisplayBlock = "block";

    private string _displayModal = DisplayNone;
    private bool _displayContent = false;
    private JsModule _jsModule = default!;
    private List<string> _assetUrls = new List<string>();


    [Parameter]
    public string Header { get; set; } = string.Empty;

    public void Open()
    {
        _displayModal = DisplayBlock;
        _displayContent = true;
        StateHasChanged();
    }

    public void Close()
    {
        _displayModal = DisplayNone;
        _displayContent = false;
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        await InitJsModule();
        await base.OnInitializedAsync();
    }

    private async ValueTask<ItemsProviderResult<string>> LoadAssets(ItemsProviderRequest request)
    {
        ICollection<AssetDto> assetInfos = await _assetsApi.ListAssetsAsync();

        int startIndex = request.StartIndex;
        int endIndex = startIndex + request.Count;
        var range = new Range(startIndex, endIndex);

        await Task.Delay(5000);

        IEnumerable<string> urls = await Task.WhenAll(assetInfos
            .Take(range)
            .Select(async info =>
            {
                using MemoryStream content = await LoadAssetContentAsync(info.StorageId);

                return await _jsModule.Module!.InvokeAsync<string>("getImageUrl", content.ToArray());
            })
            .ToArray());

        return new ItemsProviderResult<string>(urls, urls.Count());
    }

    private async Task LoadAssetsAsync()
    {
        ICollection<AssetDto> assetInfos = await _assetsApi.ListAssetsAsync();

        MemoryStream[] assets = await Task.WhenAll(
            assetInfos
            .Select(info => LoadAssetContentAsync(info.StorageId))
            .ToArray());

        await Task.WhenAll(
            assets
            .Select( async asset => {
                try
                {
                    string url = await _jsModule.Module!.InvokeAsync<string>("getImageUrl", asset.ToArray());
                    _assetUrls.Add(url);
                }
                finally
                {
                    asset.Dispose();
                }
            })
            .ToArray());

        StateHasChanged();
    }

    private async Task<MemoryStream> LoadAssetContentAsync(string storageId)
    {
        using FileResponse response = await _assetsApi.GetAssetContnetAsync(storageId);
        var result = new MemoryStream();
        response.Stream.CopyTo(result);

        return result;
    }

    private async Task InitJsModule()
    {
        _jsModule = _jsModulesProvider.AssetManager;
        await _jsModule.LoadingTask;
    }
}
