@using Model.Design.Math;
@using Model.Utils;

<div class="resize-input" style="visibility: @_visibility">
    @if(_isVisible)
    {
        <div class="form-check form-switch switch">
            <input class="form-check-input" style="margin-right: 5px" type="checkbox" id="proportional-check" checked="@_proportionalResize" @oninput="OnProportionalResizeInput" disabled="@(!AllowUnproportional)">
            <label class="form-check-label" for="proportional-check">Proportional resize</label>
        </div>
        @if (_proportionalResize)
        {
            <label for="scale-x">Scale:</label>
            <input id="scale-x" class="slider" type="range" step="1" min="@_minValue" max="@_maxValue" value="@_valueX" @oninput="OnValueXInput" list="snap-to-default">
        }
        else
        {
            <label for="scale-x">Scale X:</label>
            <input id="scale-x" class="slider" type="range" step="1" min="@_minValue" max="@_maxValue" value="@_valueX" @oninput="OnValueXInput" list="snap-to-default">
            <label for="scale-y">Scale Y:</label>
            <input id="scale-y" class="slider" type="range" step="1" min="@_minValue" max="@_maxValue" value="@_valueY" @oninput="OnValueYInput" list="snap-to-default">
        }
        <datalist id="snap-to-default">
            <option value="@_defaultValue"></option>
        </datalist>
    }
</div>

@code {
    private const string Visible = "visible";
    private const string Hidden = "hidden";

    private float _minScale = 0.125f;
    private float _maxScale = 2f;
    private float _zeroScale = 0.5f;

    private float _scaleX;
    private float _scaleY;
    private Point _scale;

    private int _minValue = -100;
    private int _maxValue = 100;
    private int _defaultValue = 0;
    private int _valueX;
    private int _valueY;
    private bool _proportionalResize = true;
    private bool _isVisible = true;
    private string _visibility = Visible;

    public bool ProportionalResize 
    {
        get
        {
            return _proportionalResize;
        }
        private set
        {
            _proportionalResize = value;
            StateHasChanged();
        }
    }

    [Parameter]
    public bool AllowUnproportional { get; set; }

    [Parameter]
    public Point Scale 
    { 
        get
        {
            return _scale;
        }
        set
        {
            if(value == null)
            {
                return;
            }

            _scaleX = MathUtils.Clamp(value.X, _minScale, _maxScale);
            _scaleY = MathUtils.Clamp(value.Y, _minScale, _maxScale);
            UpdateValue();
        }
    }

    [Parameter]
    public EventCallback<Point> ScaleChanged { get; set; }

    [Parameter]
    public bool IsVisible 
    { 
        get
        {
            return _isVisible;
        }
        set
        {
            _isVisible = value;
            _visibility = _isVisible ? Visible : Hidden;
            UpdateValue();
            StateHasChanged();
        }
    }

    protected override void OnInitialized()
    {
        _scale = new Point(_scaleX, _scaleY);
        _defaultValue = GetValue(1);

        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        if(!AllowUnproportional)
        {
            ProportionalResize = true;
        }

        base.OnParametersSet();
    }

    private async Task OnValueXInput(ChangeEventArgs e)
    {
        _valueX = Convert.ToInt32(e.Value?.ToString());

        if(ProportionalResize)
        {
            _valueY = _valueX;
        }

        await UpdateScale();
    }

    private async Task OnValueYInput(ChangeEventArgs e)
    {
        _valueY = Convert.ToInt32(e.Value?.ToString());
        await UpdateScale();
    }

    private async Task OnProportionalResizeInput(ChangeEventArgs e)
    {
        ProportionalResize = (bool)(e.Value);

        if (ProportionalResize)
        {
            _valueY = _valueX;
        }

        await UpdateScale();
    }

    private async Task UpdateScale()
    {
        _scale = new Point(
            GetScale(_valueX),
            GetScale(_valueY));

        await ScaleChanged.InvokeAsync(_scale);
    }

    private void UpdateValue()
    {
        _valueX = GetValue(_scaleX);
        _valueY = GetValue(_scaleY);
    }

    private float GetScale(float value)
    {
        if(value < 0)
        {
            return (_minScale - _zeroScale) / _minValue * value + _zeroScale;
        }
        else
        {
            return (_maxScale - _zeroScale) / _maxValue * value + _zeroScale;
        }
    }

    private int GetValue(float scale)
    {
        if(scale < _zeroScale)
        {
            return (int)((scale - _zeroScale) * _minValue / (_minScale - _zeroScale));
        }
        else
        {
            return (int)((scale - _zeroScale) * _maxValue / (_maxScale - _zeroScale));
        }
    }
}
