@using BlazorExtensions.Models;

<div 
    class="@_class"
     style="--item-size: @(Size)px; margin: @(Margin)px;"
     @onclick="(args) => OnClick(args)" @onclick:stopPropagation>
    <div class="center">
        <img class="asset-item-image" src="@_asset.ImageUrl" />
    </div>
</div>

@code {
    private const string UnselectedClass = "asset-item";
    private const string SelectedClass = "asset-item-selected";

    private string _class = UnselectedClass;

    private Asset _asset = default!;
    private bool _isSelected;

    [Parameter]
    public float Size { get; set; }

    [Parameter]
    public float Margin { get; set; }

    [Parameter]
    public Asset Asset
    {
        get
        {
            return _asset;
        }
        set
        {
            if (_asset == value)
            {
                return;
            }

            _asset = value;
            IsSelected = false;
        }
    }

    public bool IsSelected
    {
        get
        {
            return _isSelected;
        }
        set
        {
            _isSelected = value;
            UpdateClass();

            if(_isSelected)
            {
                Selected.InvokeAsync(this);
            }
            else
            {
                Unselected.InvokeAsync(this);
            }
        }
    }

    [Parameter]
    public EventCallback<AssetItem> Selected { get; set; }

    [Parameter]
    public EventCallback<AssetItem> Unselected { get; set; }

    private void OnClick(MouseEventArgs e)
    {
        IsSelected = !IsSelected;
    }

    private void UpdateClass()
    {
        if (_isSelected)
        {
            _class = SelectedClass;
        }
        else
        {
            _class = UnselectedClass;
        }
    }
}