@using Blazor.Extensions
@using Blazor.Extensions.Canvas
@using Blazor.Extensions.Canvas.Canvas2D
@using BlazorExtensions.Commands
@using BlazorExtensions.Commands.Context
@using BlazorExtensions.InputHandling
@using BlazorExtensions.InputHandling.HitTest
@using BlazorExtensions.Models;
@using BlazorExtensions.Rendering
@using BlazorExtensions.Services
@using BlazorExtensions.Services.JsInterop
@using BlazorExtensions.Viewports
@using Model.Design
@using Model.Design.Appearance.Color
@using Model.Design.Content
@using Model.Design.Content.Controls
@using Model.Design.Math
@inject IJSRuntime JsRuntime
@inject ISurfaceRenderer _surfaceRenderer
@inject IJsModulesProvider _jsModules
@inject IHitTestStrategyFactory _hitTestStrategyFactory
@implements IDesignViewer

<div style="width: @(Width)px; height: @(Height)px;">
    <div class="canvas-container" style="background-color: transparent; position: absolute; width: @(Width)px; height: @(Height)px">
        <BECanvas Width="@Width" Height="@Height" @ref="_canvasReference"></BECanvas>
    </div>

    <!--Doesn't capture keyboard events without tabindex-->
    <div class="canvas-container" style="position: absolute; width: @(Width)px; height: @(Height)px"
         tabindex="0"
         @onmousedown="OnMouseDown"
         @onmouseup="OnMouseUp"
         @onmousemove="OnMouseMove"
         @onmouseover="OnMouseOver"
         @onmouseout="OnMouseOut"
         @onwheel="OnWheel"
         @onkeydown="OnKeyDown"
         @onkeyup="OnKeyUp"
         @onkeypress="OnKeyPress">
        <BECanvas Width="@Width" Height="@Height" @ref="_uiCanvasReference"></BECanvas>
    </div>
</div>

@code {
    private Design _design;
    private int _currentSurfaceIndex;
    private BECanvasComponent _canvasReference;
    private BECanvasComponent _uiCanvasReference;
    private Canvas2DContext _outputCanvasContext;
    private Canvas2DContext _uiCanvasContext;
    private JsModule _module;
    private DotNetObjectReference<DesignViewer> _instanceRef;
    private IInputHandlingBuilder _inputHandler;
    private IViewport _viewport;

    private Element? _selectedElement;

    [Parameter]
    public long Width { get; set; } = 256;

    [Parameter]
    public long Height { get; set; } = 256;

    [Parameter]
    public Sides ArtboardScrollMargin { get; set; } = new Sides(0f);

    [Parameter]
    public EventCallback<Element?> SelectedElementChangedParameter { get; set; }

    public event EventHandler<Element?>? SelectedElementChanged;

    public IViewport Viewport
    {
        get
        {
            if(_viewport == null)
            {
                var viewportSize = new Size()
                {
                    Width = Width,
                    Height = Height
                };

                _viewport = new Viewport(
                    viewportSize, 
                    new Size(), 
                    ArtboardScrollMargin);
            }

            return _viewport;
        }
    }

    public Surface CurrentSurface
    {
        get
        {
            return _design.Surfaces[_currentSurfaceIndex];
        }
    }

    public Element? SelectedElement 
    { 
        get
        {
            return _selectedElement;
        }
        set
        {
            _selectedElement = value;
            SelectedElementChanged?.Invoke(this, _selectedElement);
            SelectedElementChangedParameter.InvokeAsync(_selectedElement);
        }
    }

    public Color? SelectedElementFillColor
    {
        get
        {
            return SelectedElement?.Content.ClosedVector?.Fill?.Solid.Color;
        }
        set
        {
            if (SelectedElement == null)
            {
                return;
            }

            SelectedElement.Content.ClosedVector.Fill.Solid.Color = value;
        }
    }

    public Affine2DMatrix Transform
    {
        get
        {
            Size size = CurrentArtboard.Size;
            Point shiftToCenter = new Point(
                (Width - size.Width * Viewport.Zoom) / 2, 
                (Height - size.Height * Viewport.Zoom) / 2);
            Point scroll = new Point(Viewport.ScrollX, Viewport.ScrollY);

            return Affine2DMatrix.CreateIdentity()
                .Translate(shiftToCenter)
                .Translate(scroll)
                .Scale(Viewport.Zoom);
        }
    }

    public Design Design
    {
        get
        {
            return _design;
        }
        set
        {
            _design = value;
            Viewport.ContentSize = CurrentArtboard.ActualSize;

            RequestRendering();
        }
    }

    public int CurrentSurfaceIndex
    {
        get
        {
            return _currentSurfaceIndex;
        }
        set
        {
            _currentSurfaceIndex = value;
            Viewport.ContentSize = CurrentArtboard.ActualSize;
            RequestRendering();
        }
    }

    public IHitTestStrategyFactory HitTestStrategyFactory
    {
        get
        {
            return _hitTestStrategyFactory;
        }
    }

    [JSInvokable]
    public async ValueTask ViewerRenderLoop(float timeStamp)
    {
        await RedrawCanvasAsync(timeStamp);
        await RedrawUiCanvasAsync(timeStamp);

        RequestRendering();
    }

    public void ExecuteCommand(ICommand command)
    {
        if (command.CanExecute())
        {
            command.Execute(new ExecutionContext(this));
        }
    }

    protected override void OnInitialized()
    {
        _inputHandler = new DesignViewerInputHandler(this);
        _inputHandler.UseHandler<ViewPortInputHandler>();
        _inputHandler.UseHandler<DesignInputHandler>();

        _module = _jsModules.DesignViewer;

        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _outputCanvasContext = await _canvasReference.CreateCanvas2DAsync();
            _uiCanvasContext = await _uiCanvasReference.CreateCanvas2DAsync();

            _surfaceRenderer.Context = _outputCanvasContext;

            await _module.LoadingTask;

            _instanceRef = DotNetObjectReference.Create(this);

            RequestRendering();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private Artboard CurrentArtboard
    {
        get
        {
            return CurrentSurface.Artboards.First();
        }
    }

    private void RequestRendering()
    {
        if (_module.Module == null || _instanceRef == null)
        {
            return;
        }

        _module.Module.InvokeVoidAsync("callRequestAnimationFrame", _instanceRef);
    }

    private void OnMouseDown(MouseEventArgs e)
    {
        ICommand result = _inputHandler.OnMouseDown(e);
        ExecuteCommand(result);
    }

    private void OnMouseMove(MouseEventArgs e)
    {
        ICommand result = _inputHandler.OnMouseMove(e);
        ExecuteCommand(result);
    }

    private void OnMouseUp(MouseEventArgs e)
    {
        ICommand result = _inputHandler.OnMouseUp(e);
        ExecuteCommand(result);
    }

    private void OnMouseOver(MouseEventArgs e)
    {
        ICommand result = _inputHandler.OnMouseOver(e);
        ExecuteCommand(result);
    }

    private void OnMouseOut(MouseEventArgs e)
    {
        ICommand result = _inputHandler.OnMouseOut(e);
        ExecuteCommand(result);
    }

    private void OnWheel(WheelEventArgs e)
    {
        ICommand result = _inputHandler.OnWheel(e);
        ExecuteCommand(result);
    }

    private void OnKeyPress(KeyboardEventArgs e)
    {
        ICommand result = _inputHandler.OnKeyPress(e);
        ExecuteCommand(result);
    }

    private void OnKeyDown(KeyboardEventArgs e)
    {
        ICommand result = _inputHandler.OnKeyDown(e);
        ExecuteCommand(result);
    }

    private void OnKeyUp(KeyboardEventArgs e)
    {
        ICommand result = _inputHandler.OnKeyUp(e);
        ExecuteCommand(result);
    }

    private async Task RedrawCanvasAsync(float timeStamp)
    { 
        await _surfaceRenderer.Render(CurrentSurface, Width, Height, Transform);
        
        if(SelectedElement != null)
        {
            await _surfaceRenderer.RenderSelection(SelectedElement, Transform);
        }
    }

    private async Task RedrawUiCanvasAsync(float timeStamp)
    {
        await _uiCanvasContext.SetGlobalAlphaAsync(0.66f);
        await _uiCanvasContext.ClearRectAsync(0, 0, Width, Height);

        if(Viewport.IsHorizontalScrollbarShown)
        {
            await RedrawHorizontalScrollbarAsync();
        }
        if(Viewport.IsVerticalScrollbarShown)
        {
            await RedrawVerticalScrollbarAsync();
        }   

        await _uiCanvasContext.SetFillStyleAsync("black");
        await _uiCanvasContext.SetFontAsync("10px verdana");
        var selected = SelectedElement?.Content.ElementContentCase;
        await _uiCanvasContext.FillTextAsync($"SelectedElement: {selected}", 5, 10);

        await _uiCanvasContext.FillTextAsync($"scrollX: {Viewport.ScrollX.ToString("N2")}", Width - 80, 10);
        await _uiCanvasContext.FillTextAsync($"scrollY: {Viewport.ScrollY.ToString("N2")}", Width - 80, 30);
        await _uiCanvasContext.FillTextAsync($"zoom: {Viewport.Zoom.ToString("N2")}", Width - 80, 50);   
    }

    private async Task RedrawVerticalScrollbarAsync()
    {
        float verticalScrollbarX = Width - Viewport.ScrollbarSize;

        await _uiCanvasContext.SetFillStyleAsync("#F4D3FF");
        await _uiCanvasContext.FillRectAsync(
            verticalScrollbarX, 
            0, 
            Viewport.ScrollbarSize, 
            Height - Viewport.ScrollbarSize);

        await _uiCanvasContext.SetFillStyleAsync("#C182D6");
        await _uiCanvasContext.FillRectAsync(
            verticalScrollbarX,
            Viewport.VerticalScrollbarBodyPos,
            Viewport.ScrollbarSize,
            Viewport.VerticalScrollbarBodyHeight);
    }

    private async Task RedrawHorizontalScrollbarAsync()
    {
        float horizontalScrollbarY = Height - Viewport.ScrollbarSize;

        await _uiCanvasContext.SetFillStyleAsync("#F4D3FF");
        await _uiCanvasContext.FillRectAsync(
            0, 
            horizontalScrollbarY, 
            Width - Viewport.ScrollbarSize, 
            Viewport.ScrollbarSize);

        await _uiCanvasContext.SetFillStyleAsync("#C182D6");
        await _uiCanvasContext.FillRectAsync(
            Viewport.HorizontalScrollbarBodyPos,
            horizontalScrollbarY,
            Viewport.HorizontalScrollbarBodyWidth,
            Viewport.ScrollbarSize);
    }
}
