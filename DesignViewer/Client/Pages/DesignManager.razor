@page "/"
@using ApiClient
@using BlazorExtensions;
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject IDesignsApiClient _designsApiClient

<PageTitle>Designs</PageTitle>

<h1>Designs:</h1>

<div style="height: 500px; width: 500px; overflow-y: scroll; margin: 1em">
    @if(_firstFetch)
    {
        <Preloader></Preloader>
    }
    <Virtualize @ref="_virtualizeComponent" Context="design" ItemsProvider="@LoadDesigns">
        <ItemContent>
            <div style="border: 2px outset black; padding: 10px; margin: 5px; height: 90px;">
            <h5>@design.Name</h5>
            <button class="btn btn-light" @onclick="() => EditDesign(design)">
                <span class="oi oi-pencil"></span>
                Edit
                </button>
            <button class="btn btn-danger" @onclick="() => DeleteDesign(design)">
                <span class="oi oi-trash"></span>
                Delete
                </button>
        </div>
        </ItemContent>
        <Placeholder>
            <div class="placeholder-container">
                <img src="./_content/BlazorExtensions/preloader2.gif" style="height: 100%; aspect-ratio: 1 / 1; display: block" />
            </div>
        </Placeholder>
    </Virtualize>
</div>
<button class="btn btn-primary" @onclick="CreateDesign"
    style="width: 500px; margin: 0 0 0 1em">
    <span class="oi oi-plus"></span>
    New
</button>
<Message @ref="_message"></Message>

@code {
    private Virtualize<DesignDto> _virtualizeComponent;

    private const string ErrorMessage 
        = "An error has occured";
    private const string DeleteMessage 
        = "File \"{0}\" has been successfully removed";
    private const string DeleteConfirmationMessage
        = "Are you really want to delete file \"{0}\"?";

    private Message _message = default!;
    private bool _firstFetch = true;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    private void EditDesign(DesignDto design)
    {
        NavigationManager.NavigateTo($"/editor/{design.Name}");
    }

    private void CreateDesign()
    {
        NavigationManager.NavigateTo("/editor");
    }

    private async Task DeleteDesign(DesignDto design)
    {
        try
        {
            bool confirmed = await JsRuntime.InvokeAsync<bool>(
                "confirm", 
                string.Format(DeleteConfirmationMessage, design.Name));
            if(confirmed)
            {
                await _designsApiClient.DeleteDesignAsync(design.Name);
                await ReloadDesigns();
                _message.Show(string.Format(DeleteMessage, design.Name));
            }
        }
        catch
        {
            _message.Show(ErrorMessage);
        }
    }

    private async ValueTask<ItemsProviderResult<DesignDto>> LoadDesigns(ItemsProviderRequest request)
    {
        var designs = await _designsApiClient.ListDesignsAsync();
        var result = designs
            .Skip(request.StartIndex)
            .Take(request.Count);

        if (_firstFetch)
        {
            _firstFetch = false;
            StateHasChanged();
        }

        return new ItemsProviderResult<DesignDto>(result, designs.Count);
    }

    private async Task ReloadDesigns()
    {
        await _virtualizeComponent.RefreshDataAsync();
        StateHasChanged();
    }
}
