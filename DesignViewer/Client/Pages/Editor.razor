@page "/editor"
@page "/editor/{DesignName}"
@using ApiClient
@using BlazorExtensions
@using BlazorExtensions.Commands
@using BlazorExtensions.Models
@using BlazorExtensions.Services
@using DesignViewer.Client.Models
@using DesignViewer.Client.Services
@using Google.Protobuf
@using Model.Design
@using Model.Design.Math
@using Model.Design.Appearance
@using Model.Design.Content
@using Model.Design.Appearance.Color
@using Model.Design.Content.Controls
@inject IDesignsApiClient _designsApiClient
@inject IElementFactory _elementFactory
@inject IWindowService _windowService

<PageTitle>Editor</PageTitle>

<AssetManager @ref="_assetManager" Header="@_assetManagerHeader" Closed="OnAssetManagerClosed"></AssetManager>

<div id="editor" style="display: flex; flex-direction: row; justify-content: flex-end;">
    <div style="
            border: none;
            display: flex;
            align-content: center;
            align-items: flex-start;
            flex-direction: column;
            justify-content: center;">
        <Toolbar OnImageClick="OpenSelectImage" OnShapeClick="(args) => _viewerWidth += 10">
            <ColorPicker Width="300" IsVisible="@_isColorPickerVisible" @bind-Color="Color"></ColorPicker>
        </Toolbar>

        <DesignViewer Width="@_viewerWidth"
                      Height="@_viewerHeight"
                      AutoScrollMargin="true"
                      SelectedElementChangedParameter="@OnSelectedElementChanged"
                      @ref="_designViewer"></DesignViewer>

        <div style="display: flex; justify-content: center; margin-top: 10px">
            <button class="btn btn-primary"
                    style="margin: 0 5px 0 0; height: 2.25rem; padding: 0.2rem 0.75rem 0.175rem 0.75rem;"
                    type="submit"
                    @onclick="(args) => OpenSelectMockup()">
                Select mockup
            </button>
            <button class="btn btn-danger"
                    style="margin: 0 5px; height: 2.25rem; padding: 0.2rem 0.75rem 0.175rem 0.75rem;"
                    @onclick="() => OnRemoveMockup()"
                    disabled="@(!RemoveMockupEnabled)">
                <span class="oi oi-x"></span>
                Remove mockup
            </button>
        </div>
    </div>
</div>

<EditForm Model="@_saveDesignModel"
          OnValidSubmit="@HandleSaveDesignSubmitAsync"
          OnInvalidSubmit="@HandleSaveDesignInvalidSubmit">
    <div style="display: flex; flex-direction: column; justify-content: flex-end; align-items: center;">
        <Message @ref="_designSaveMessage"></Message>

        <div class="input-group">
            <InputText class="form-control" placeholder="Enter design name" @bind-Value="_saveDesignModel.Name" style="margin-right: 10px" />
            <button class="btn btn-success" style="width: 20%" type="submit">
                <span class="oi oi-check"></span>
                Save
            </button>
        </div>

        <DataAnnotationsValidator />
        <ValidationSummary />
    </div>
</EditForm>

@code {
    private const string ErrorMessage = "An error has occured";
    private const string SaveMessage = "File \"{0}\" has been successfully saved";
    private const string UpdateMessage = "File \"{0}\" has been successfully updated";
    private const string SelectImageHeader = "Select image:";
    private const string SelectMockupHeader = "Select mockup:";

    private IDesignViewer _designViewer;
    private AssetManager _assetManager = default!;
    private Message _designSaveMessage = default!;
    private SaveDesignModel _saveDesignModel = new();
    private bool _isColorPickerVisible = false;
    private Color _color;
    private string _assetManagerHeader = string.Empty;
    private long _viewerWidth = 550;
    private long _viewerHeight = 550;

    private bool RemoveMockupEnabled
    {
        get
        {
            if(_designViewer?.Design == null)
            {
                return false;
            }

            return _designViewer?.CurrentSurface.Mockup != null;
        }
    }

    private Color Color
    {
        get 
        {
            return _color;
        }
        set
        {
            _color = value;
            _designViewer.SelectedElementFillColor = _color;
        }
    }

    [Parameter]
    public string? DesignName { get; set; }

    private void OnSelectedElementChanged(Element? element)
    {
        if(_designViewer.SelectedElementFillColor == null)
        {
            _isColorPickerVisible = false;
            return;
        }

        Color = _designViewer.SelectedElementFillColor;
        _isColorPickerVisible = true;
    }

    protected override async Task OnInitializedAsync()
    {
        _windowService.Resized += OnWindowResized;
        Size windowSize = await _windowService.GetSizeAsync();
        UpdateViewerSize(windowSize);

        base.OnInitialized();
    }

    protected override async Task OnParametersSetAsync()
    {
        if(DesignName == null)
        {
            return;
        }

        var response = await _designsApiClient.GetDesignContentAsync(DesignName);
        Design design = Design.Parser.ParseFrom(response.Stream);

        _designViewer.Design = design;
        _designViewer.CurrentSurfaceIndex = 0;

        _saveDesignModel.Name = DesignName;

        await base.OnParametersSetAsync();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if(firstRender && DesignName == null)
        {
            Design design = Design.CreateBlank();
            _designViewer.Design = design;
            _designViewer.CurrentSurfaceIndex = 0;
        }

        base.OnAfterRender(firstRender);
    }

    private async Task HandleSaveDesignSubmitAsync()
    {
        try
        {
            var designStream = new MemoryStream();
            _designViewer.Design.WriteTo(designStream);
            designStream.Position = 0;
            var designFile = new FileParameter(designStream);

            DesignDto result;

            if(string.IsNullOrEmpty(_saveDesignModel.Name))
            {
                result = await _designsApiClient.UploadDesignAutoNameAsync(designFile);
                _designSaveMessage.Show(string.Format(SaveMessage, result.Name));
                return;
            }

            var designs = await _designsApiClient.ListDesignsAsync();
            var designNames = designs.Select(x => x.Name);
            if (designNames.Contains(_saveDesignModel.Name))
            {
                result = await _designsApiClient.UpdateDesignAsync(_saveDesignModel.Name, designFile);
                _designSaveMessage.Show(string.Format(UpdateMessage, result.Name));
                return;
            }

            result = await _designsApiClient.UploadDesignAsync(_saveDesignModel.Name, designFile);
            _designSaveMessage.Show(string.Format(SaveMessage, result.Name));
        }
        catch
        {
            _designSaveMessage.Show(ErrorMessage);
        }
    }

    private void HandleSaveDesignInvalidSubmit()
    {
        _designSaveMessage.Clear();
    }

    private void OpenSelectImage()
    {
        _assetManagerHeader = SelectImageHeader;
        _assetManager.Submited += OnImageSelected;
        _assetManager.Open(new AssetFetchOptions(AssetType.Image));
    }

    private void OpenSelectMockup()
    {
        _assetManagerHeader = SelectMockupHeader;
        _assetManager.Submited += OnMockupSelected;
        _assetManager.Open(new AssetFetchOptions(AssetType.Mockup));
    }

    private void OnImageSelected(object? sender, Asset asset)
    {
        Element image = _elementFactory.CreateImage(
            asset.Info.StorageId, 
            new Point(0, 0),
            Affine2DMatrix.CreateScale(0.5f));

        _designViewer.ExecuteCommand(
            new CompositeCommand(
                new AddElementCommand(image),
                new ChangeSelectionCommand(image)));
    }

    private void OnMockupSelected(object? sender, Asset asset)
    {
        _designViewer.ExecuteCommand(new SetMockupCommand(asset));
    }

    private void OnRemoveMockup()
    {
        _designViewer.ExecuteCommand(new RemoveMockupCommand());
    }

    private void OnAssetManagerClosed()
    {
        _assetManager.Submited -= OnImageSelected;
        _assetManager.Submited -= OnMockupSelected;
    }

    private void OnWindowResized(object? sender, Size args)
    {
        UpdateViewerSize(args);
        StateHasChanged();
    }

    private void UpdateViewerSize(Size windowSize)
    {
        _viewerWidth = (long)(0.7f * windowSize.Width);
        _viewerHeight = (long)(0.75f * windowSize.Height);
    }
}