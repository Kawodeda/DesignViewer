@page "/editor"
@page "/editor/{DesignName}"
@using ApiClient
@using BlazorExtensions
@using DesignViewer.Client.Models
@using Google.Protobuf
@using Model.Design
@using Model.Design.Math
@using Model.Design.Appearance
@using Model.Design.Content
@using Model.Design.Appearance.Color
@using Model.Design.Content.Controls

<PageTitle>Editor</PageTitle>

<h1>Editor</h1>

<div style="margin-bottom: 5px">
    <ColorPicker Width="300" @bind-Color="Color"></ColorPicker>
</div>

<div style="width: 700px; height: 480px">
    <DesignViewer 
        Width="700" 
        Height="480" 
        ArtboardScrollMargin="@(new Sides(150))"
        SelectedElementChanged="OnSelectedElementChanged"
        @ref="_designViewer"></DesignViewer>
</div>

<EditForm Model="@_saveDesignModel" 
    OnValidSubmit="@HandleSaveDesignSubmitAsync" 
    OnInvalidSubmit="@HandleSaveDesignInvalidSubmit"
    style="margin: 1em">
    <InputText @bind-Value="_saveDesignModel.Name"/>

    <button class="btn btn-light" type="submit">Save</button>

    <DataAnnotationsValidator/>
    <ValidationSummary/>
    
    <p>
        <label style="margin: 1em 0">@_saveFormMessage</label>
    </p>
</EditForm>

@code {
    [Parameter]
    public string? DesignName { get; set; }

    private IDesignViewer _designViewer;
    private IDesignsApiClient _designsApiClient;
    private SaveDesignModel _saveDesignModel = new();
    private bool colorPickerOpened = false;

    private const string ErrorMessage = "An error has occured";
    private const string SaveMessage = "File \"{0}\" has been successfully saved";
    private const string UpdateMessage = "File \"{0}\" has been successfully updated";

    private string _saveFormMessage = "";

    private Color _color;

    private Color Color
    {
        get 
        {
            return _color;
        }
        set
        {
            _color = value;

            if (_designViewer.SelectedElement != null)
                _designViewer.ChangeSelectedElementColor(ColorConverter.ToHtml(_color.Process.Rgb, _color.Process.Alpha));
        }
    }

    private void OnSelectedElementChanged(Element? element)
    {
        if(element == null || element.Content.ElementContentCase != ElementContent.ElementContentOneofCase.ClosedVector)
        {
            return;
        }

        Color = element.Content.ClosedVector.Fill.Solid.Color;
    }

    protected override async Task OnInitializedAsync()
    {
        _designsApiClient = new DesignsApiClient("https://localhost:7091", new HttpClient());

        await base.OnInitializedAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        if(DesignName == null)
        {
            return;
        }

        var response = await _designsApiClient.GetDesignContentAsync(DesignName);
        Design design = Design.Parser.ParseFrom(response.Stream);

        _designViewer.Design = design;
        _designViewer.CurrentSurfaceIndex = 0;

        _saveDesignModel.Name = DesignName;

        await base.OnParametersSetAsync();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if(firstRender && DesignName == null)
        {
            Design design = Design.CreateBlank();
            _designViewer.Design = design;
            _designViewer.CurrentSurfaceIndex = 0;
        }

        base.OnAfterRender(firstRender);
    }

    private async Task HandleSaveDesignSubmitAsync()
    {
        try
        {
            var designStream = new MemoryStream();
            _designViewer.Design.WriteTo(designStream);
            designStream.Position = 0;
            var designFile = new FileParameter(designStream);

            DesignDto result;

            if(string.IsNullOrEmpty(_saveDesignModel.Name))
            {
                result = await _designsApiClient.UploadDesignAutoNameAsync(designFile);
                _saveFormMessage = string.Format(SaveMessage, result.Name);
                return;
            }
            
            var designs = await _designsApiClient.ListDesignsAsync();
            var designNames = designs.Select(x => x.Name);
            if (designNames.Contains(_saveDesignModel.Name))
            {
                result = await _designsApiClient.UpdateDesignAsync(_saveDesignModel.Name, designFile);
                _saveFormMessage = string.Format(UpdateMessage, result.Name);
                return;
            }

            result = await _designsApiClient.UploadDesignAsync(_saveDesignModel.Name, designFile);
            _saveFormMessage = string.Format(SaveMessage, result.Name);
        }
        catch
        {
            _saveFormMessage = ErrorMessage;
        }
    }

    private void HandleSaveDesignInvalidSubmit()
    {
        _saveFormMessage = "";
    }
}
