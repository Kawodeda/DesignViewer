@page "/editor"
@page "/editor/{DesignName}"
@using ApiClient
@using BlazorExtensions
@using BlazorExtensions.Commands
@using BlazorExtensions.Models
@using BlazorExtensions.Services
@using DesignViewer.Client.Models
@using Google.Protobuf
@using Model.Design
@using Model.Design.Math
@using Model.Design.Appearance
@using Model.Design.Content
@using Model.Design.Appearance.Color
@using Model.Design.Content.Controls
@inject IDesignsApiClient _designsApiClient
@inject IElementFactory _elementFactory

<PageTitle>Editor</PageTitle>

<h1>Editor</h1>

<AssetManager @ref="_assetManager" Header="@_assetManagerHeader" Closed="OnAssetManagerClosed"></AssetManager>

<div style="margin-bottom: 5px">
    <ColorPicker Width="300" IsVisible="@_isColorPickerVisible" @bind-Color="Color"></ColorPicker>
</div>

<div style="
    border: none;
    display: flex;
    align-content: center;
    align-items: flex-start;
    flex-direction: row;
    justify-content: center;
    margin: 0 10% 0 0">
    <button class="btn btn-outline-primary" style="
    width: 2em;
    height: 2em;
    padding: 0;
    margin: 0 15px 0 0;" @onclick="(args) => OpenSelectImage()">
        <span class="oi oi-image"></span>
    </button>
    <DesignViewer 
        Width="700" 
        Height="480" 
        ArtboardScrollMargin="@(new Sides(150))"
        SelectedElementChangedParameter="@OnSelectedElementChanged"
        @ref="_designViewer"></DesignViewer>
</div>

<div style="display: flex; justify-content: center">
    <button class="btn btn-outline-primary"
            style="margin: 5px"
            type="submit"
            @onclick="(args) => OpenSelectMockup()">
        Select mockup
    </button>
    <button 
        class="btn btn-outline-danger" 
        style="margin: 5px" 
        @onclick="() => OnRemoveMockup()" 
        disabled="@(!RemoveMockupEnabled)">
        <span class="oi oi-x"></span>
        Remove mockup
    </button>
</div>

<EditForm Model="@_saveDesignModel" 
    OnValidSubmit="@HandleSaveDesignSubmitAsync" 
    OnInvalidSubmit="@HandleSaveDesignInvalidSubmit">
    <div style="display: flex; flex-direction: column; justify-content: center; align-items: center">
        <div style="display: flex; justify-content: center;">
            <InputText @bind-Value="_saveDesignModel.Name" style="margin: 5px"/>
            <button class="btn btn-outline-success" type="submit" style="margin: 5px">
                <span class="oi oi-check"></span>
                Save
            </button>
        </div>

        <DataAnnotationsValidator/>
        <ValidationSummary/>
    
        <p style="margin: 5px 0">
            @_saveFormMessage
        </p>
    </div>
</EditForm>

@code {
    private const string ErrorMessage = "An error has occured";
    private const string SaveMessage = "File \"{0}\" has been successfully saved";
    private const string UpdateMessage = "File \"{0}\" has been successfully updated";
    private const string SelectImageHeader = "Select image:";
    private const string SelectMockupHeader = "Select mockup:";

    private IDesignViewer _designViewer;
    private AssetManager _assetManager = default!;
    private SaveDesignModel _saveDesignModel = new();
    private bool _isColorPickerVisible = false;
    private string _saveFormMessage = "";
    private Color _color;
    private string _assetManagerHeader = string.Empty;

    private bool RemoveMockupEnabled
    {
        get
        {
            return _designViewer?.CurrentSurface.Mockup != null;
        }
    }

    private Color Color
    {
        get 
        {
            return _color;
        }
        set
        {
            _color = value;
            _designViewer.SelectedElementFillColor = _color;
        }
    }

    [Parameter]
    public string? DesignName { get; set; }

    private void OnSelectedElementChanged(Element? element)
    {
        if(_designViewer.SelectedElementFillColor == null)
        {
            _isColorPickerVisible = false;
            return;
        }

        Color = _designViewer.SelectedElementFillColor;
        _isColorPickerVisible = true;
    }

    protected override async Task OnParametersSetAsync()
    {
        if(DesignName == null)
        {
            return;
        }

        var response = await _designsApiClient.GetDesignContentAsync(DesignName);
        Design design = Design.Parser.ParseFrom(response.Stream);

        _designViewer.Design = design;
        _designViewer.CurrentSurfaceIndex = 0;

        _saveDesignModel.Name = DesignName;

        await base.OnParametersSetAsync();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if(firstRender && DesignName == null)
        {
            Design design = Design.CreateBlank();
            _designViewer.Design = design;
            _designViewer.CurrentSurfaceIndex = 0;
        }

        base.OnAfterRender(firstRender);
    }

    private async Task HandleSaveDesignSubmitAsync()
    {
        try
        {
            var designStream = new MemoryStream();
            _designViewer.Design.WriteTo(designStream);
            designStream.Position = 0;
            var designFile = new FileParameter(designStream);

            DesignDto result;

            if(string.IsNullOrEmpty(_saveDesignModel.Name))
            {
                result = await _designsApiClient.UploadDesignAutoNameAsync(designFile);
                _saveFormMessage = string.Format(SaveMessage, result.Name);
                return;
            }

            var designs = await _designsApiClient.ListDesignsAsync();
            var designNames = designs.Select(x => x.Name);
            if (designNames.Contains(_saveDesignModel.Name))
            {
                result = await _designsApiClient.UpdateDesignAsync(_saveDesignModel.Name, designFile);
                _saveFormMessage = string.Format(UpdateMessage, result.Name);
                return;
            }

            result = await _designsApiClient.UploadDesignAsync(_saveDesignModel.Name, designFile);
            _saveFormMessage = string.Format(SaveMessage, result.Name);
        }
        catch
        {
            _saveFormMessage = ErrorMessage;
        }
    }

    private void HandleSaveDesignInvalidSubmit()
    {
        _saveFormMessage = "";
    }

    private void OpenSelectImage()
    {
        _assetManagerHeader = SelectImageHeader;
        _assetManager.Submited += OnImageSelected;
        _assetManager.Open(new AssetFetchOptions(AssetType.Image));
    }

    private void OpenSelectMockup()
    {
        _assetManagerHeader = SelectMockupHeader;
        _assetManager.Submited += OnMockupSelected;
        _assetManager.Open(new AssetFetchOptions(AssetType.Mockup));
    }

    private void OnImageSelected(object? sender, Asset asset)
    {
        Element image = _elementFactory.CreateImage(
            asset.Info.StorageId, 
            new Point(0, 0),
            Affine2DMatrix.CreateScale(0.5f));

        _designViewer.ExecuteCommand(
            new CompositeCommand(
                new AddElementCommand(image),
                new ChangeSelectionCommand(image)));
    }

    private void OnMockupSelected(object? sender, Asset asset)
    {
        _designViewer.ExecuteCommand(new SetMockupCommand(asset));
    }

    private void OnRemoveMockup()
    {
        _designViewer.ExecuteCommand(new RemoveMockupCommand());
    }

    private void OnAssetManagerClosed()
    {
        _assetManager.Submited -= OnImageSelected;
        _assetManager.Submited -= OnMockupSelected;
    }
}